#BlueJ class context
comment0.target=Produzieren
comment0.text=\r\n\ In\ dieser\ Klasse\ sind\ rekursive\ Algorithmen\ umzusetzen.\r\n\ \r\n\ @author\ Prateek\ kalra\r\n\ @version\ 2022\r\n
comment1.params=n
comment1.target=int\ fak(int)
comment1.text=\r\n\ Liefert\ die\ Fakult\u00E4t\ von\ n,\ also\ das\ Produkt\ aller\ nat\u00FCrlichen\ Zahlen\ bis\ n.\r\n\ Die\ Fakult\u00E4t\ von\ 0\ ist\ per\ mathematischer\ Definition\ 1.\r\n\r\n\ Beispielauswertung\:\r\n\ \r\n\ \ \ fak(4)\r\n\ ->\ 4\ *\ fak(3)\r\n\ ->\ 4\ *\ (3\ *\ fak(2))\r\n\ ->\ 4\ *\ (3\ *\ (2\ *\ fak(1)))\r\n\ ->\ 4\ *\ (3\ *\ (2\ *\ (1\ *\ fak(0))))\r\n\ ->\ 4\ *\ (3\ *\ (2\ *\ (1\ *\ 1)))\r\n\ ->\ 4\ *\ (3\ *\ (2\ *\ 1))\r\n\ ->\ 4\ *\ (3\ *\ 2)\r\n\ ->\ 4\ *\ 6\r\n\ ->\ 24\r\n
comment10.params=
comment10.target=void\ testfak()
comment11.params=
comment11.target=void\ testleer()
comment12.params=
comment12.target=void\ testVok()
comment13.params=
comment13.target=void\ testdreh()
comment14.params=
comment14.target=java.lang.String\ testAllMethode()
comment2.params=dividend\ divisor
comment2.target=int\ mod(int,\ int)
comment2.text=\r\n\ Berechnet\ n\ modulo\ m,\ also\ den\ Rest\ der\ ganzzahligen\ Division\ n/m.\r\n\ \r\n\ modulo(14,3)\ ->\ modulo(11,3)\ ->\ modulo(8,3)\ ->\ modulo(5,3)\ ->\ modulo(2,3)\ ->\ 2\r\n\ \r\n\ @param\ n\ ein\ beliebiger\ Wert\ >\=\ 0\r\n\ @param\ m\ ein\ beliebiger\ Wert\ >\ 0\r\n\ \ \r\n\ \ \ \ public\ int\ mod(int\ n,\ int\ m)\ throws\ Exception\r\n\ \ \ \ {\ \ \ int\ r;\r\n\ \ \ \ \ \ \ \ if(n>\=0\ &&\ m>0){\r\n\ \ \ \ \ \ \ \ \ r\=\ n%m;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ else\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ throw\ new\ Exception("nota\ valid\ input");\ \ \ \ \r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ return\ r;\r\n\ \ \ \ }\r\n
comment3.params=text
comment3.target=boolean\ enthaeltVokal(java.lang.String)
comment3.text=\r\n\ Gibt\ an,\ ob\ die\ Zeichenkette\ einen\ Vokal\ enth\u00E4lt.\ Auswertungen\:\r\n\ \r\n\ enthaeltVokal("brei")\ ->\ enthaeltVokal("rei")\ ->\ enthaeltVokal("ei")\ ->\ true\r\n\ enthaeltVokal("xyz")\ ->\ enthaeltVokal("yz")\ ->\ enthaeltVokal("z")\ ->\ enthaeltVokal("")\ ->\ false\r\n\ @param\ s\ ein\ beliebiger\ String\ ungleich\ null\r\n
comment4.params=ch
comment4.target=boolean\ istVokal(char)
comment5.params=s
comment5.target=boolean\ isPalindrom(java.lang.String)
comment5.text=\r\n\ Gibt\ an,\ ob\ die\ Zeichenkette\ ein\ Palindrom\ ist.\ Auswertungen\:\r\n\ \r\n\ istPalindrom("anna")\ ->\ istPalindrom("nn")\ ->\ istPalindrom("")\ ->\ true\r\n\ istPalindrom("asta")\ ->\ istPalindrom("st")\ ->\ false\r\n\ istPalindrom("axa")\ ->\ istPalindrom("x")\ ->\ true\r\n\ istPalindrom("xyz")\ ->\ false\r\n\ @param\ s\ ein\ beliebiger\ String\ ungleich\ null\r\n\ \ \ \ \r\n\ \ \ \ public\ boolean\ istPalindrom(String\ text)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ String\ s\=text.toLowerCase();\ //\ yu\ lower\ case\ ,Unterschied\ zwichen\ a\ und\ A\ zu\ vermeiden\r\n\ \ \ \ \ \ \ \ for\ (int\ i\=0\ ,\ j\=s.length()-1\ ;\ i<j/2\ ;\ i++\ ,\ j--\ )\ //\ j/2\ die\ programm\ schneller\ zu\ \ machen.\r\n\ \ \ \ \ \ \ \ {\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (\ s.charAt(i)\ \!\=\ s.charAt(j)\ )\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\r\n\ \ \ \ \ \ \ \ return\ true;\r\n\ \ \ \ }\r\n
comment6.params=str
comment6.target=int\ anzahlLeerzeichen(java.lang.String)
comment6.text=\r\n\ Berechnet\ die\ Anzahl\ Leerzeichen\ in\ der\ Zeichenketten.\ Auswertung\:\r\n\ \r\n\ anzahlLeerzeichen("a\ bc\ d")\r\n\ ->\ 0\ +\ anzahlLeerzeichen("\ bc\ d")\r\n\ ->\ 0\ +\ (1\ +\ anzahlLeerzeichen("bc\ d"))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ anzahlLeerzeichen("c\ d")))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ anzahlLeerzeichen("\ d"))))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ (1\ +\ anzahlLeerzeichen("d")))))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ (1\ +\ (0\ +\ anzahlLeerzeichen(""))))))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ (1\ +\ (0\ +\ 0)))))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ (1\ +\ 0))))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ (0\ +\ 1)))\r\n\ ->\ 0\ +\ (1\ +\ (0\ +\ 1))\r\n\ ->\ 0\ +\ (1\ +\ 1)\r\n\ ->\ 0\ +\ 2\r\n\ ->\ 2\r\n\ @param\ s\ ein\ beliebiger\ String\ ungleich\ null\r\n\ \ \ \ \r\n\ \ \ \ public\ int\ anzahlLeerzeichen(String\ s)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ int\ count\=0;\r\n\ \ \ \ \ \ \ \ for(int\ x\=0;x<s.length();x++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ if(s.charAt(x)\=\='\ ')\r\n\ \ \ \ \ \ \ \ {\ \ \ \ \r\n\ \ \ \ \ \ \ \ count\ \=count+1;\r\n\ \ \ \ \ \ \ \ }\ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ return\ count;\ \ \ \r\n\ \ \ \ }\ \ \ \ \r\n
comment7.params=str
comment7.target=java.lang.String\ umgedreht(java.lang.String)
comment7.text=\r\n\ Liefert\ die\ umgedrehte\ Zeichenkette.\ Auswertung\:\r\n\ \r\n\ \ \ umgedreht("regal")\r\n\ ->\ umgedreht("egal")\ +\ 'r'\r\n\ ->\ (umgedreht("gal")\ +\ 'e')\ +\ 'r'\r\n\ ->\ ((umgedreht("al")\ +\ 'g')\ +\ 'e')\ +\ 'r'\r\n\ ->\ (((umgedreht("l")\ +\ 'a')\ +\ 'g')\ +\ 'e')\ +\ 'r'\r\n\ ->\ (((\ \ \ \ \ \ \ \ \ \ "l"\ \ +\ 'a')\ +\ 'g')\ +\ 'e')\ +\ 'r'\r\n\ ->\ ((\ \ \ \ \ \ \ \ \ \ \ "la"\ \ \ \ \ \ \ \ +\ 'g')\ +\ 'e')\ +\ 'r'\r\n\ ->\ (\ \ \ \ \ \ \ \ \ \ \ \ "lag"\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ 'e')\ +\ 'r'\r\n\ ->\ \ \ \ \ \ \ \ \ \ \ \ \ \ "lage"\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ 'r'\r\n\ ->\ \ \ \ \ \ \ \ \ \ \ \ \ \ "lager"\r\n\ @param\ s\ ein\ beliebiger\ String\ ungleich\ null\r\n
comment8.params=
comment8.target=void\ testmod()
comment9.params=
comment9.target=void\ testpallin()
numComments=15
